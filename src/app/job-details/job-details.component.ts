import { Component, OnInit } from '@angular/core';
import { DemandeRecrutementService } from '../services/demande-offre.service';
import { DemandeRecrutement } from '../models/demande-recrutement';
import { ActivatedRoute, Router } from '@angular/router';
import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { JwtHelperService } from '@auth0/angular-jwt';
import { DemandeProjetService } from '../services/demande-projet.service';
import { DemandeRealisation } from '../models/demande-realisation';
import { OffreService } from '../services/offre.service';
import { ProjetService } from '../services/projet.service';

@Component({
  selector: 'app-job-details',
  templateUrl: './job-details.component.html',
  styleUrls: ['./job-details.component.scss']
})
export class JobDetailsComponent implements OnInit{
  id_user: any;
  role: any;
 
  offreDetails: any; // Adjust the type based on your Offre model
  projetDetails: any; // Adjust the type based on your Projet model
  constructor(private serviceprojet:ProjetService,private servicoffre:OffreService,private router : Router,private demandeProjet:DemandeProjetService,private demandeRecrutementService: DemandeRecrutementService,private route: ActivatedRoute, private snackBar: MatSnackBar, private jwtHelper: JwtHelperService) {}
  id!: number;
 type!:string;
  
 ngOnInit(): void {
  this.route.paramMap.subscribe(params => {
    this.id = +params.get('id')!;
    this.type = params.get('type')!;
    console.log(this.id, this.type);

    const userData = localStorage.getItem('user');
    if (userData) {
      const user = JSON.parse(userData);
      this.id_user = user.id;
      this.role = user.role;
    }

    // Fetch details based on type
    if (this.type === 'offre') {
      this.fetchOffreDetails(this.id);
    } else if (this.type === 'projet') {
      this.fetchProjetDetails(this.id);
    }
  });
}

fetchOffreDetails(id: number): void {
  this.servicoffre.getOffreById(id).subscribe(
    (offreDetails) => {
      console.log('Offre Details:', offreDetails);
      this.offreDetails = offreDetails;
      // Display your offre details in the template
    },
    (error) => {
      console.error('Error fetching Offre Details:', error);
    }
  );
}

fetchProjetDetails(id: number): void {
  this.serviceprojet.getProjetById(id).subscribe(
    (projetDetails) => {
      console.log('Projet Details:', projetDetails);
      this.projetDetails = projetDetails;
      // Display your projet details in the template
    },
    (error) => {
      console.error('Error fetching Projet Details:', error);
    }
  );
}
  onCreateDemandeRecrutement(): void {
    if (!this.isUserLoggedIn()) {
      // If not logged in, navigate to the login page
      this.router.navigate(['/login']);
      return;
    }


    const newDemandeRecrutement: DemandeRecrutement = {
      // Initialize the properties as needed
       id : 0,  // Assuming the id is generated by the server
      entreprise:  {id:this.id_user}/* Initialize the User object */ ,
      offre: {id:this.id} /* Initialize the Offre object */,
      date_demande: new Date(), // Example: Set the current date
      //etatD: EtatDemande.EN_ATTENTE, // Example: Set the initial state
    };

    const newDemandeProjet: DemandeRealisation = {
      // Initialize the properties as needed
       id : 0,  // Assuming the id is generated by the server
      freelancer:  {id:this.id_user}/* Initialize the User object */ ,
      projet: {id:this.id} /* Initialize the Offre object */,
      date_demande: new Date(), // Example: Set the current date
      //etatD: EtatDemande.EN_ATTENTE, // Example: Set the initial state
    };

    if (this.type == 'offre'){
      if(this.role == "Entreprise"){
    this.demandeRecrutementService.createDemandeRecrutement(newDemandeRecrutement)
      .subscribe(
        (createdDemandeRecrutement) => {
          // Handle success, e.g., display a success message
          console.log('Demande Recrutement created:', createdDemandeRecrutement);
          this.showSuccessMessage();
        },
        (error) => {
          // Handle error, e.g., display an error message
          this.showFailMessage();
          console.error('Error creating Demande Recrutement:', error);
        }
      );
      }else{ this.showError1Message();}
  
    }else{ if(this.role == "FREELANCER"){
    this.demandeProjet.createDemandeRealisation(newDemandeProjet)
      .subscribe(
        (createdDemandeRealisation) => {
          // Handle success, e.g., display a success message
          console.log('Demande Recrutement created:', createdDemandeRealisation);
          this.showSuccessMessage();
        },
        (error) => {
          // Handle error, e.g., display an error message
          this.showFailMessage();
          console.error('Error creating Demande Recrutement:', error);
        }
      );

    }else{this.showErrorMessage();}
  }



}
  private isUserLoggedIn(): boolean {
    // Add your logic to check if the user is logged in
    // For example, check if the access token is present in local storage
    const accessToken = localStorage.getItem('access_token');
    return !!accessToken; // Returns true if the access token is present
  }

  showSuccessMessage() {
    const config = new MatSnackBarConfig();
    config.duration = 3000; // Duration in milliseconds
    config.horizontalPosition = 'center'; // Set the horizontal position to center
    config.verticalPosition = 'bottom' ; // Set the vertical position to top

    this.snackBar.open('Demande Envoyé!', 'Close', config);
  }

  showFailMessage() {
    
    const config = new MatSnackBarConfig();
    config.duration = 3000; // Duration in milliseconds
    config.horizontalPosition = 'center'; // Set the horizontal position to center
    config.verticalPosition = 'bottom'; // Set the vertical position to top

    this.snackBar.open('Vous avez deja envoyé !', 'Close', config);
  }

  showError1Message() {
    const config = new MatSnackBarConfig();
    config.duration =7000; // Duration in milliseconds
    config.horizontalPosition = 'center'; // Set the horizontal position to center
    config.verticalPosition = 'bottom' ; // Set the vertical position to top

    this.snackBar.open('Vous devez etre une entreprise pour recruter!', 'Close', config);
  }
  showErrorMessage() {
    const config = new MatSnackBarConfig();
    config.duration = 7000; // Duration in milliseconds
    config.horizontalPosition = 'center'; // Set the horizontal position to center
    config.verticalPosition = 'bottom' ; // Set the vertical position to top

    this.snackBar.open('Tu Dois connecter en tant que freelancer pour postuler!', 'Close', config);
  }
}

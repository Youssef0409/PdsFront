import { Component, OnInit } from '@angular/core';
import { DemandeRecrutementService } from '../services/demande-offre.service';
import { DemandeRecrutement } from '../models/demande-recrutement';
import { ActivatedRoute, Router } from '@angular/router';
import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { JwtHelperService } from '@auth0/angular-jwt';
import { DemandeProjetService } from '../services/demande-projet.service';
import { DemandeRealisation } from '../models/demande-realisation';

@Component({
  selector: 'app-job-details',
  templateUrl: './job-details.component.html',
  styleUrls: ['./job-details.component.scss']
})
export class JobDetailsComponent implements OnInit{
  id_user: any;
  constructor(private router : Router,private demandeProjet:DemandeProjetService,private demandeRecrutementService: DemandeRecrutementService,private route: ActivatedRoute, private snackBar: MatSnackBar, private jwtHelper: JwtHelperService) {}
  id!: number;
 type!:string;
  
  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      this.id = +params.get('id')!;
      this.type =params.get('type')!;
      console.log(this.id)
      // Now you can use 'this.id' in your component
    });

    
      const userData = localStorage.getItem('user');
      if (userData) {
        const user = JSON.parse(userData);
         this.id_user = user.id;       
      }
  }


  onCreateDemandeRecrutement(): void {
    if (!this.isUserLoggedIn()) {
      // If not logged in, navigate to the login page
      this.router.navigate(['/login']);
      return;
    }


    const newDemandeRecrutement: DemandeRecrutement = {
      // Initialize the properties as needed
       id : 0,  // Assuming the id is generated by the server
      entreprise:  {id:this.id_user}/* Initialize the User object */ ,
      offre: {id:this.id} /* Initialize the Offre object */,
      date_demande: new Date(), // Example: Set the current date
      //etatD: EtatDemande.EN_ATTENTE, // Example: Set the initial state
    };

    const newDemandeProjet: DemandeRealisation = {
      // Initialize the properties as needed
       id : 0,  // Assuming the id is generated by the server
      freelancer:  {id:this.id_user}/* Initialize the User object */ ,
      projet: {id:this.id} /* Initialize the Offre object */,
      date_demande: new Date(), // Example: Set the current date
      //etatD: EtatDemande.EN_ATTENTE, // Example: Set the initial state
    };

    if (this.type == 'offre'){
    this.demandeRecrutementService.createDemandeRecrutement(newDemandeRecrutement)
      .subscribe(
        (createdDemandeRecrutement) => {
          // Handle success, e.g., display a success message
          console.log('Demande Recrutement created:', createdDemandeRecrutement);
          this.showSuccessMessage();
        },
        (error) => {
          // Handle error, e.g., display an error message
          this.showFailMessage();
          console.error('Error creating Demande Recrutement:', error);
        }
      );
  }else{
    this.demandeProjet.createDemandeRealisation(newDemandeProjet)
      .subscribe(
        (createdDemandeRealisation) => {
          // Handle success, e.g., display a success message
          console.log('Demande Recrutement created:', createdDemandeRealisation);
          this.showSuccessMessage();
        },
        (error) => {
          // Handle error, e.g., display an error message
          this.showFailMessage();
          console.error('Error creating Demande Recrutement:', error);
        }
      );


  }



}
  private isUserLoggedIn(): boolean {
    // Add your logic to check if the user is logged in
    // For example, check if the access token is present in local storage
    const accessToken = localStorage.getItem('access_token');
    return !!accessToken; // Returns true if the access token is present
  }

  showSuccessMessage() {
    const config = new MatSnackBarConfig();
    config.duration = 3000; // Duration in milliseconds
    config.horizontalPosition = 'center'; // Set the horizontal position to center
    config.verticalPosition = 'bottom' ; // Set the vertical position to top

    this.snackBar.open('Demande Envoyé!', 'Close', config);
  }

  showFailMessage() {
    
    const config = new MatSnackBarConfig();
    config.duration = 3000; // Duration in milliseconds
    config.horizontalPosition = 'center'; // Set the horizontal position to center
    config.verticalPosition = 'bottom'; // Set the vertical position to top

    this.snackBar.open('Vous avez deja envoyé !', 'Close', config);
  }


 
}
